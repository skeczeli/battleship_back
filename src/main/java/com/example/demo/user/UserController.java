package com.example.demo.user;

import com.example.demo.DeleteAccountRequest;
import com.example.demo.game.GameSession;
import com.example.demo.game.GameSessionRepository;
import com.example.demo.util.JwtUtil;
import com.google.api.client.auth.openidconnect.IdToken.Payload;
import com.google.api.client.googleapis.auth.oauth2.GoogleIdToken;
import com.google.api.client.googleapis.auth.oauth2.GoogleIdTokenVerifier;
import com.google.api.client.http.javanet.NetHttpTransport;
import com.google.api.client.json.jackson2.JacksonFactory;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.stream.Collectors;

@Controller // This means that this class is a Controller
@RequestMapping(path="") // This means URL's start with /demo (after Application path)
public class UserController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private UserRepository userRepository;

    @Autowired
    private DeletedUsernameRepository deletedUsernameRepository;

    @Autowired
    private GameSessionRepository gameSessionRepository;

    @Autowired
    private JwtUtil jwtUtil;

    @Autowired
    private FollowRepository followRepository;

    @PostMapping("/login")
    public ResponseEntity<?> login(@RequestBody UserDTO credentials) {
        Optional<User> userOpt = userRepository.findByUsername(credentials.getUsername());

        if (userOpt.isPresent()) {
            User user = userOpt.get();
            if (user.getPassword().equals(credentials.getPassword())) {
                String token = jwtUtil.generateToken(user.getUsername());
                // armar userDTO para devolver
                UserDTO dto = new UserDTO(
                        user.getUsername(),
                        user.getName(),
                        null, // No enviar la contraseña por seguridad
                        user.getEmail(),
                        user.getWins(),
                        user.getLosses()
                );
                return ResponseEntity.ok()
                        .header("Authorization", "Bearer " + token)
                        .body(dto);
            }
        }

        return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body("Credenciales inválidas");
    }

    @PostMapping(path="/add")
    public ResponseEntity<?> addNewUser(@RequestBody UserDTO body) {
        try {
            if (userRepository.findByUsername(body.getUsername()).isPresent()) {
                return ResponseEntity.status(HttpStatus.CONFLICT)
                        .body("El nombre de usuario ya está en uso");
            }

            if (deletedUsernameRepository.existsByUsername(body.getUsername())) {
                return ResponseEntity.status(HttpStatus.FORBIDDEN)
                    .body("Este nombre de usuario no puede volver a registrarse.");
            }


            User n = new User();
            n.setName(body.getName());
            n.setEmail(body.getEmail());
            n.setUsername(body.getUsername());
            n.setPassword(body.getPassword());
            userRepository.save(n);

            return ResponseEntity.ok("Usuario registrado correctamente");

        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                    .body("Error al registrar el usuario");
        }
    }

    @PutMapping("/api/users/update")
    public ResponseEntity<?> updateUser(
            @RequestHeader("Authorization") String authHeader,
            @RequestBody UserDTO updatedData
    ) {
        if (authHeader == null || !authHeader.startsWith("Bearer ")) {
            return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body("Falta el token de autenticación");
        }

        String token = authHeader.replace("Bearer ", "");
        String usernameFromToken = jwtUtil.validateTokenAndGetUsername(token);

        if (usernameFromToken == null) {
            return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body("Token inválido o expirado");
        }

        Optional<User> userOpt = userRepository.findByUsername(usernameFromToken);
        if (userOpt.isEmpty()) {
            return ResponseEntity.status(HttpStatus.NOT_FOUND).body("Usuario no encontrado");
        }

        User user = userOpt.get();

        // Protección extra: ignoramos cualquier username en el body y usamos solo el del token
        if (updatedData.getName() != null) user.setName(updatedData.getName());
        if (updatedData.getEmail() != null) user.setEmail(updatedData.getEmail());
        if (updatedData.getPassword() != null) user.setPassword(updatedData.getPassword());

        userRepository.save(user);

        UserDTO response = new UserDTO(
                user.getUsername(),
                user.getName(),
                null,
                user.getEmail(),
                user.getWins(),
                user.getLosses()
        );

        return ResponseEntity.ok(response);
    }

    @GetMapping(path="/all")
    public @ResponseBody Iterable<User> getAllUsers() {
        // This returns a JSON or XML with the users
        return userRepository.findAll();
    }

    @GetMapping("/api/users/{username}")
    public ResponseEntity<?> getUserByUsername(
            @PathVariable String username,
            @RequestHeader(value = "Authorization", required = false) String authHeader
    ) {
        Optional<User> userOpt = userRepository.findByUsername(username);

        if (userOpt.isPresent()) {
            User user = userOpt.get();
            
            // Obtener estadísticas de seguimiento
            long followersCount = followRepository.countByFollowing(user);
            long followingCount = followRepository.countByFollower(user);
            
            Boolean isFollowing = null;
            
            // Si hay token, verificar si el usuario autenticado sigue a este usuario
            if (authHeader != null && authHeader.startsWith("Bearer ")) {
                String token = authHeader.replace("Bearer ", "");
                String authenticatedUsername = jwtUtil.validateTokenAndGetUsername(token);
                
                if (authenticatedUsername != null && !authenticatedUsername.equals(username)) {
                    Optional<User> authenticatedUserOpt = userRepository.findByUsername(authenticatedUsername);
                    if (authenticatedUserOpt.isPresent()) {
                        isFollowing = followRepository.existsByFollowerAndFollowing(
                            authenticatedUserOpt.get(), user
                        );
                    }
                }
            }
            
            UserDTO dto = new UserDTO(
                user.getUsername(),
                user.getName(),
                null, // no enviamos la contraseña
                user.getEmail(),
                user.getWins(),
                user.getLosses(),
                followersCount,
                followingCount,
                isFollowing
            );
            
            return ResponseEntity.ok(dto);
        }

        return ResponseEntity.status(HttpStatus.NOT_FOUND).body("Usuario no encontrado");
    }

    @GetMapping("/api/users/{username}/games")
    public ResponseEntity<?> getUserGameHistory(
            @PathVariable String username,
            @RequestHeader(value = "Authorization", required = false) String authHeader
    ) {
        try {
            // Verificar que el usuario existe
            Optional<User> userOpt = userRepository.findByUsername(username);
            if (!userOpt.isPresent()) {
                return ResponseEntity.status(HttpStatus.NOT_FOUND)
                        .body("Usuario no encontrado");
            }

            // Obtener historial de juegos
            List<GameSession> userGameSessions = getUserGameSessions(username);

            List<GameSessionDTO> gameHistoryDTOs = userGameSessions.stream()
                    .map(session -> convertToGameSessionDTO(session, username))
                    .sorted(Comparator.comparing(GameSessionDTO::getStartTime, Comparator.nullsLast(Comparator.reverseOrder())))
                    .collect(Collectors.toList());

            return ResponseEntity.ok(gameHistoryDTOs);

        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                    .body("Error al obtener historial de juegos: " + e.getMessage());
        }
    }

    private List<GameSession> getUserGameSessions(String username) {
        List<GameSession> userGameSessions = new ArrayList<>();

        // Buscar juegos donde el usuario es player one
        List<GameSession> asPlayerOne = gameSessionRepository.findByPlayerOneId(username);
        if (asPlayerOne != null) {
            userGameSessions.addAll(asPlayerOne);
        }

        // Buscar juegos donde el usuario es player two
        List<GameSession> asPlayerTwo = gameSessionRepository.findByPlayerTwoId(username);
        if (asPlayerTwo != null) {
            userGameSessions.addAll(asPlayerTwo);
        }

        // Eliminar duplicados si los hay
        return userGameSessions.stream()
                .distinct()
                .collect(Collectors.toList());
    }

    private GameSessionDTO convertToGameSessionDTO(GameSession session, String currentUsername) {
        GameSessionDTO dto = new GameSessionDTO();

        LocalDateTime endTime = session.getEndedAt();

        dto.setSessionId(session.getSessionId());
        dto.setStartTime(session.getStartedAt());
        if (session.getStartedAt() == null) {
            System.out.println("Game session sin startTime: " + session.getSessionId());
        }

        dto.setEndTime(endTime);

        // Determinar el oponente
        String opponent = null;
        if (session.getPlayerOneId().equals(currentUsername)) {
            opponent = session.getPlayerTwoId();
        } else if (session.getPlayerTwoId().equals(currentUsername)) {
            opponent = session.getPlayerOneId();
        }
        dto.setOpponent(opponent);

        // Determinar el resultado desde la perspectiva del usuario actual
        String result = null;
        if (session.getWinner() != null) {
            if (session.getWinner().equals(currentUsername)) {
                result = "Victoria";
            } else {
                result = "Derrota";
            }
        } else if (endTime != null) {
            result = "Empate";
        }
        dto.setResult(result);

        // Estado del juego
        dto.setStatus(endTime != null ? "Finalizada" : "Activa");

        dto.setBoardSize(session.getBoardSize());

        return dto;
    }

    @CrossOrigin(origins = {
    "http://localhost:3000",
    "https://battleship-front-57bd.onrender.com"
    })
    @PostMapping("/api/google-login")
    public ResponseEntity<?> googleLogin(@RequestBody Map<String, String> request) {
        String idTokenString = request.get("idToken");

        GoogleIdTokenVerifier verifier = new GoogleIdTokenVerifier.Builder(
                new NetHttpTransport(), new JacksonFactory())
                .setAudience(Collections.singletonList("409016241894-8m0djdn0pqcqeis8jb2q4p3o303pnbjc.apps.googleusercontent.com"))
                .build();

        try {
            GoogleIdToken idToken = verifier.verify(idTokenString);
            if (idToken != null) {
                Payload payload = idToken.getPayload();
                String email = (String) payload.get("email");
                String name = (String) payload.get("name");

                Optional<User> existing = userRepository.findByEmail(email);
                User user;

                if (existing.isPresent()) {
                    user = existing.get();

                    // Verificar si está en la blacklist por username
                    if (deletedUsernameRepository.existsByUsername(user.getUsername())) {
                        return ResponseEntity.status(HttpStatus.FORBIDDEN)
                            .body("Este usuario fue eliminado y no puede volver a iniciar sesión.");
                    }

                } else {
                    String username = email.split("@")[0];

                    // Verificar si ese username está en la blacklist ANTES de crear el usuario
                    if (deletedUsernameRepository.existsByUsername(username)) {
                        return ResponseEntity.status(HttpStatus.FORBIDDEN)
                            .body("Este usuario fue eliminado y no puede volver a registrarse.");
                    }

                    user = new User();
                    user.setEmail(email);
                    user.setName(name);
                    user.setUsername(username);
                    user.setPassword(""); // opcional
                    userRepository.save(user);
                }


                // Crear token y DTO
                String token = jwtUtil.generateToken(user.getUsername());
                UserDTO dto = new UserDTO(
                    user.getUsername(),
                    user.getName(),
                    null,
                    user.getEmail(),
                    user.getWins(),
                    user.getLosses()
                );

                return ResponseEntity.ok(
                    Map.of("user", dto, "token", token)
                );
            } else {
                return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body("Token inválido");
            }
        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("Error verificando el token");
        }
    }


    @PostMapping("/api/delete-account")
    public ResponseEntity<String> deleteAccount(@RequestHeader("Authorization") String authHeader) {
        try {
            if (authHeader == null || !authHeader.startsWith("Bearer ")) {
                return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body("Falta el token de autenticación");
            }

            String token = authHeader.replace("Bearer ", "");
            String usernameFromToken = jwtUtil.validateTokenAndGetUsername(token);

            if (usernameFromToken == null) {
                return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body("Token inválido o expirado");
            }

            Optional<User> userOpt = userRepository.findByUsername(usernameFromToken);
            if (userOpt.isEmpty()) {
                return ResponseEntity.status(HttpStatus.NOT_FOUND).body("Usuario no encontrado");
            }

            userRepository.delete(userOpt.get());
            deletedUsernameRepository.save(new DeletedUsername(userOpt.get().getUsername()));
            return ResponseEntity.ok("Cuenta eliminada correctamente");

        } catch (Exception e) {
            e.printStackTrace();
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                    .body("Error interno al intentar eliminar la cuenta: " + e.getMessage());
        }
    }

}