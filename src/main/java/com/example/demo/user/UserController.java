package com.example.demo.user;

import com.example.demo.DeleteAccountRequest;
import com.example.demo.util.JwtUtil;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.ResponseBody;

import java.util.Optional;

@Controller // This means that this class is a Controller
@RequestMapping(path="") // This means URL's start with /demo (after Application path)
public class UserController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private UserRepository userRepository;

    @Autowired
    private JwtUtil jwtUtil;

    @Autowired
    private FollowRepository followRepository;

    @PostMapping("/login")
    @CrossOrigin(origins = "http://localhost:3000", exposedHeaders = "Authorization")
    public ResponseEntity<?> login(@RequestBody UserDTO credentials) {
        Optional<User> userOpt = userRepository.findByUsername(credentials.getUsername());

        if (userOpt.isPresent()) {
            User user = userOpt.get();
            if (user.getPassword().equals(credentials.getPassword())) {
                String token = jwtUtil.generateToken(user.getUsername());
                // armar userDTO para devolver
                UserDTO dto = new UserDTO(
                        user.getUsername(),
                        user.getName(),
                        null, // No enviar la contraseña por seguridad
                        user.getEmail(),
                        user.getWins(),
                        user.getLosses()
                );
                return ResponseEntity.ok()
                        .header("Authorization", "Bearer " + token)
                        .body(dto);
            }
        }

        return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body("Credenciales inválidas");
    }

    @CrossOrigin(origins = "http://localhost:3000")
    @PostMapping(path="/add")
    public ResponseEntity<?> addNewUser(@RequestBody UserDTO body) {
        try {
            if (userRepository.findByUsername(body.getUsername()).isPresent()) {
                return ResponseEntity.status(HttpStatus.CONFLICT)
                        .body("El nombre de usuario ya está en uso");
            }

            User n = new User();
            n.setName(body.getName());
            n.setEmail(body.getEmail());
            n.setUsername(body.getUsername());
            n.setPassword(body.getPassword());
            userRepository.save(n);

            return ResponseEntity.ok("Usuario registrado correctamente");

        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                    .body("Error al registrar el usuario");
        }
    }

    @PutMapping("/api/users/update")
    @CrossOrigin(origins = "http://localhost:3000")
    public ResponseEntity<?> updateUser(
            @RequestHeader("Authorization") String authHeader,
            @RequestBody UserDTO updatedData
    ) {
        if (authHeader == null || !authHeader.startsWith("Bearer ")) {
            return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body("Falta el token de autenticación");
        }

        String token = authHeader.replace("Bearer ", "");
        String usernameFromToken = jwtUtil.validateTokenAndGetUsername(token);

        if (usernameFromToken == null) {
            return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body("Token inválido o expirado");
        }

        Optional<User> userOpt = userRepository.findByUsername(usernameFromToken);
        if (userOpt.isEmpty()) {
            return ResponseEntity.status(HttpStatus.NOT_FOUND).body("Usuario no encontrado");
        }

        User user = userOpt.get();

        // Protección extra: ignoramos cualquier username en el body y usamos solo el del token
        if (updatedData.getName() != null) user.setName(updatedData.getName());
        if (updatedData.getEmail() != null) user.setEmail(updatedData.getEmail());
        if (updatedData.getPassword() != null) user.setPassword(updatedData.getPassword());

        userRepository.save(user);

        UserDTO response = new UserDTO(
                user.getUsername(),
                user.getName(),
                null,
                user.getEmail(),
                user.getWins(),
                user.getLosses()
        );

        return ResponseEntity.ok(response);
    }

    @GetMapping(path="/all")
    public @ResponseBody Iterable<User> getAllUsers() {
        // This returns a JSON or XML with the users
        return userRepository.findAll();
    }

    @CrossOrigin(origins = "http://localhost:3000")
    @GetMapping("/api/users/{username}")
    public ResponseEntity<?> getUserByUsername(
            @PathVariable String username,
            @RequestHeader(value = "Authorization", required = false) String authHeader
    ) {
        Optional<User> userOpt = userRepository.findByUsername(username);

        if (userOpt.isPresent()) {
            User user = userOpt.get();
            
            // Obtener estadísticas de seguimiento
            long followersCount = followRepository.countByFollowing(user);
            long followingCount = followRepository.countByFollower(user);
            
            Boolean isFollowing = null;
            
            // Si hay token, verificar si el usuario autenticado sigue a este usuario
            if (authHeader != null && authHeader.startsWith("Bearer ")) {
                String token = authHeader.replace("Bearer ", "");
                String authenticatedUsername = jwtUtil.validateTokenAndGetUsername(token);
                
                if (authenticatedUsername != null && !authenticatedUsername.equals(username)) {
                    Optional<User> authenticatedUserOpt = userRepository.findByUsername(authenticatedUsername);
                    if (authenticatedUserOpt.isPresent()) {
                        isFollowing = followRepository.existsByFollowerAndFollowing(
                            authenticatedUserOpt.get(), user
                        );
                    }
                }
            }
            
            UserDTO dto = new UserDTO(
                user.getUsername(),
                user.getName(),
                null, // no enviamos la contraseña
                user.getEmail(),
                user.getWins(),
                user.getLosses(),
                followersCount,
                followingCount,
                isFollowing
            );
            
            return ResponseEntity.ok(dto);
        }

        return ResponseEntity.status(HttpStatus.NOT_FOUND).body("Usuario no encontrado");
    }

    @CrossOrigin(origins = "http://localhost:3000")
    @PostMapping("/api/delete-account")
    public ResponseEntity<String> deleteAccount(@RequestBody DeleteAccountRequest request) {
        Optional<User> user = userRepository.findByUsername(
            request.getUsername()
        );

        if (user.isPresent() && user.get().getPassword().equals(request.getPassword())) {
            userRepository.delete(user.get());
            return ResponseEntity.ok("Cuenta eliminada correctamente");
        } else {
            return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body("Usuario o contraseña incorrectos");
        }
    }
}